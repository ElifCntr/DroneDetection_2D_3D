#!/usr/bin/env python3
"""
Simple script to display images from CSV files generated by qualitative analysis.
"""

import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
import os


def display_images_from_csv(csv_path, num_images=4, title_prefix=""):
    """
    Display images from a CSV file containing image paths

    Args:
        csv_path: Path to CSV file with 'image_path' column
        num_images: Number of images to display
        title_prefix: Prefix for the plot title
    """

    # Read CSV
    if not os.path.exists(csv_path):
        print(f"CSV file not found: {csv_path}")
        return

    df = pd.read_csv(csv_path)
    print(f"Loaded {len(df)} entries from {csv_path}")

    # Limit to available images
    num_images = min(num_images, len(df))

    # Calculate grid size
    cols = 4
    rows = (num_images + cols - 1) // cols

    # Create figure
    fig, axes = plt.subplots(rows, cols, figsize=(15, 4 * rows))
    if rows == 1:
        axes = axes.reshape(1, -1)

    fig.suptitle(f'{title_prefix} - Top {num_images} Examples', fontsize=16)

    for i in range(num_images):
        row = i // cols
        col = i % cols
        ax = axes[row, col]

        # Get image info
        image_path = df.iloc[i]['image_path']
        confidence = df.iloc[i]['confidence'] if 'confidence' in df.columns else 'N/A'
        true_label = df.iloc[i]['true_label'] if 'true_label' in df.columns else 'N/A'
        predicted_label = df.iloc[i]['predicted_label'] if 'predicted_label' in df.columns else 'N/A'

        try:
            # Load and display image
            image = Image.open(image_path)
            ax.imshow(image)
            ax.axis('off')

            # Create title with info
            filename = os.path.basename(image_path)
            title = f"{filename}\nTrue: {true_label} | Pred: {predicted_label}\nConf: {confidence:.3f}" if confidence != 'N/A' else filename
            ax.set_title(title, fontsize=8)

        except Exception as e:
            ax.text(0.5, 0.5, f'Error loading:\n{os.path.basename(image_path)}',
                    ha='center', va='center', transform=ax.transAxes)
            ax.axis('off')

    # Hide empty subplots
    for i in range(num_images, rows * cols):
        row = i // cols
        col = i % cols
        axes[row, col].axis('off')

    plt.tight_layout()
    plt.show()


def main():
    """Main function to display images from different CSV files"""

    # Base directory (adjust this path)
    base_dir = r"D:\Elif\Sussex-PhD\Python_Projects\DroneDetection\qualitative_analysis"

    # CSV files to process
    csv_files = {
        "True Positives": "TP_examples.csv",
        "False Positives": "FP_examples.csv",
        "False Negatives": "FN_examples.csv",
        "True Negatives": "TN_examples.csv"
    }

    # Display images from each CSV
    for category, filename in csv_files.items():
        csv_path = os.path.join(base_dir, filename)
        print(f"\n{'=' * 50}")
        print(f"Displaying {category}")
        print(f"{'=' * 50}")

        display_images_from_csv(csv_path, num_images=8, title_prefix=category)


def display_specific_csv(csv_path, num_images=12):
    """Function to display images from a specific CSV file"""
    display_images_from_csv(csv_path, num_images, os.path.basename(csv_path))


if __name__ == "__main__":
    # Option 1: Display all categories
    main()

    # Option 2: Display specific CSV (uncomment and modify path as needed)
    # specific_csv = "D:\Elif\Sussex-PhD\Python_Projects\DroneDetection\qualitative_analysis\FP_examples.csv"
    # display_specific_csv(specific_csv, num_images=16)